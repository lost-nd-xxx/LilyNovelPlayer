＃動作確認系シナリオ

＊master.テスト１
＄s_master.オートセーブ	|
＃はじめからなのでオートセーブのみ初期化
＃他のセーブスロットやグローバルセーブには影響しない
＄文字色強制	（文字色.normal）（文字色.選択肢.normal）（文字色.アンカー）
＃文字色を強制変更する
（nextjump,シナリオＥ,テスト用変数,）



＊master.シナリオＥ
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]まず準備します。\n
\_l[10,]現時点で、ゲーム内変数は空。\n
\_l[10,]テスト用変数:「（変数読み出し,テスト用変数）」
\_q
（nextset,シナリオＥ,１,テスト用変数,0）

＊master.シナリオＥ１
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]変数に0を代入しました。\n
\_l[10,]テスト用変数:「（変数読み出し,テスト用変数）」
\_q
（next,テスト用変数,）

＊master.シナリオＥ２
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]変数に空を代入しました。\n
\_l[10,]変数が削除されました。\n
\_l[10,]テスト用変数:「（変数読み出し,テスト用変数）」
\_q
（next）

＊master.シナリオＥ３
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]おしまい。
\_q
\x
\![raise,master.テストシナリオから確認無しでタイトルに戻る]





＊master.テスト２
＄s_master.オートセーブ	|
＃はじめからなのでオートセーブのみ初期化
＃他のセーブスロットやグローバルセーブには影響しない
＄文字色強制	（文字色.normal）（文字色.選択肢.normal）（文字色.アンカー）
＃文字色を強制変更する
（nextjump,シナリオＦ）

＊master.シナリオＦ
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）

：\_q
\_l[10,10]この次、ユーザに文字入力してもらう。
\_q

（nextset,シナリオＦ,１）

＊master.シナリオＦ１
＄ユーザ入力受付中	1
＃この変数が1のときのみ「OnUserInput」系の処理をするようにしてある
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）

：\_q
\![close,inputbox,__SYSTEM_ALL_INPUT__]
＃他のインプットボックスが出ていたら消しておく

\![open,inputbox,テスト入力,--text="く、ぎ､り，じ,ま|じ:り",--timeout=0,--limit=20,--reference=シナリオＦ２]
＃Onで始まらないIDを振ると、入力された文字に対して「＊OnUserInput」で最低限の区切り字消し加工をします。
＃さくらスクリプトのエスケープはしないので、読み上げる時は「\_?」で前後を囲むなどしてください。
＃イベント「OnUserInput」「OnUserInputCancel」の処理は変数「ユーザ入力受付中」のみ動作します。

＃Onで始まるIDを振るとLNP基本辞書側での加工はしません。
＃入力決定後に「On【振ったID】」が発生します。
＃入力ボックスを閉じるか時間切れで「On【振ったID】Cancel」が発生します。
＃この場合、変数「ユーザ入力受付中」の状態は関係しません。

＃また、\0以外のバルーンからinputboxを開くと、画面の重なり順が壊れます。
＃復帰は容易ですが、注意しましょう。

\_l[10,10]文字入力受付中。
\_q

（next,テスト入力,ななしのごんべえ）

＊master.シナリオＦ２
＄ユーザ入力受付中	0
＃入力を受け付けない状態に戻す
＄__tmp	（変数読み出し,テスト入力）
＄__tmp	（when,（変数「__tmp」の存在）==0,ななしのごんべえ,（__tmp））
＃空だった時はデフォルト値を入れる
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）

：\_q
\![close,inputbox,__SYSTEM_ALL_INPUT__]
＃他のインプットボックスが出ていたら消しておく

\_l[10,10]入力されたのは「\_?（__tmp）\_?」です。
\_q
（nextset,シナリオＦ,３）
＄__tmp	
＃残す必要のない変数を消しておく

＊master.シナリオＦ３
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）

：\_q
\_l[10,10]おしまい。
\_q
\x
\![raise,master.テストシナリオから確認無しでタイトルに戻る]



＊master.テスト３
＄s_master.オートセーブ	|
＃はじめからなのでオートセーブのみ初期化
＃他のセーブスロットやグローバルセーブには影響しない
＄文字色強制	（文字色.normal）（文字色.選択肢.normal）（文字色.アンカー）
＃文字色を強制変更する
（nextjump,シナリオＧ）

＊master.シナリオＧ
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]被りにくさを高めたい時の、\n
\_l[10,]補助識別子を生成します。\n[150]
\_l[10,]半角英数字62種をランダムに選び、\n
\_l[10,]指定された桁数の文字列を作ります。\n[150]
\_l[10,]生成後、インプットボックスを開きます。\n
\_l[10,]そこからコピーして使ってください。\n[150]
\_l[10,]被るまでの試行回数の期待値は、\n
\_l[10,]8桁で約1677万7216回です。\n[200]\_q

\_l[10,]\![*]（選択肢,　８桁,シナリオＧ１,補助識別子,（call,補助識別子生成,8））\n
\_l[10,]\![*]（選択肢,１２桁,シナリオＧ１,補助識別子,（call,補助識別子生成,12））\n
\_l[10,]\![*]（選択肢,１６桁,シナリオＧ１,補助識別子,（call,補助識別子生成,16））


＊master.シナリオＧ１
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\![close,inputbox,__SYSTEM_ALL_INPUT__]
＃他のインプットボックスが出ていたら消しておく

\![open,inputbox,,--text="（変数読み出し,補助識別子）",--timeout=0,--reference=シナリオＧ１,--option=noclose,--option=noclear]
\_q
\_l[10,10]インプットボックスを開きました。\n
\_l[10,]φ（OKを押しても今は反応しませんφ）\n[150]
\_l[10,]表示された識別子をコピーしてお使いください。\n[300]
\_l[10,]画面クリックでタイトルに戻ります...
\_q\x
\![close,inputbox,__SYSTEM_ALL_INPUT__]
\![raise,master.テストシナリオから確認無しでタイトルに戻る]



＠補助識別子生成	（vncall,is_digit,A0）==1
（times,（A0）,（at,（補助識別子生成.文字）,（乱数0～61）））
＃被るまでの試行回数の期待値
＃8桁で1677万7216回
＃12桁で687億1947万6736回
＃16桁で281兆4749億7671万656回

＃Ｎビットの乱数が被るまでの試行回数の期待値はだいたい２の（Ｎ÷２）乗
＃以下、計算手順の備忘
＃(1). ６２の【生成桁数】乗を１０進数で計算する
＃(2). (1)の数値を、２進数に変換する（この桁数が上記のＮにあたる）
＃(3). (2)の文字数を数える
＃(4). ２の（【(3)の数値】÷２）乗

＃参考URL:
＃ https://qiita.com/ta_ta_ta_miya/items/1f8f71db3c1bf2dfb7ea
＃ https://keisan.casio.jp/exec/system/1294758675
＃ https://hogehoge.tk/tool/number.html

＠補助識別子生成	（vncall,is_digit,A0）==0
数字以外が入力されました

＠補助識別子生成.文字
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
＃62種類の文字



＊master.シナリオＨ
＄__tmp	（call,ラベル通過,シナリオＨ,オートセーブ不可）
＄文字色強制	（文字色.normal）（文字色.選択肢.normal）（文字色.アンカー）
＄__tmp＝（メニュー不可）
＄メニュー状態.ギャラリー	1
＄メニュー状態.タイトルに戻る	1
（音停止）（文字色.normal）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]\![*]\__q[OnMenu,ギャラリー]ギャラリーを開く\__q　\![*]\__q[master.テストシナリオから確認無しでタイトルに戻る]タイトルに戻る\__q\n[200]

\_l[10,]ギャラリーの解放状態を操作します。\n[200]\_q

\_l[10,]\![*]（選択肢,全て解放する,シナリオＨ１,__global__ギャラリー１,1,__global__ギャラリー２の１,1,__global__ギャラリー２の２,1,__global__ギャラリー２の３,1,__global__ギャラリー２の４,1,__global__ギャラリー３,1,__global__ギャラリー４,1）\n
\_l[10,]\![*]（選択肢,部分的に解放する,シナリオＨ１,__global__ギャラリー１,,__global__ギャラリー２の１,1,__global__ギャラリー２の２,,__global__ギャラリー２の３,1,__global__ギャラリー２の４,,__global__ギャラリー３,1,__global__ギャラリー４,）\n
\_l[10,]\![*]（選択肢,初期状態に戻す,シナリオＨ１,__global__ギャラリー１,,__global__ギャラリー２の１,,__global__ギャラリー２の２,,__global__ギャラリー２の３,,__global__ギャラリー２の４,,__global__ギャラリー３,,__global__ギャラリー４,）


＊master.シナリオＨ１
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]ギャラリーの解放状態を操作しました。\x
\![raise,master.シナリオＨ]







＊master.qが押された	（中断箇所）==master.起動
＄文字色強制	（文字色.normal）（文字色.選択肢.normal）（文字色.アンカー）
＞master.コマンド入力脱出	（KeyPressCommand_AcceptingInputs）==1
＄__tmp	（call,ラベル通過,qが押された,オートセーブ不可）
＄KeyPressCommand_AcceptingInputs	1
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]\f[bold,1]コマンド入力受付中\f[bold,0]\n[200]

\_l[10,]キーボード入力によるコマンド入力を受付中です。\n[150]
\_l[10,]qを入力するか、ゴースト終了・再起動で\n
\_l[10,]この画面から脱出します。
\_q\![set,balloontimeout,0]


＊master.でばっぐるーむ
＄__tmp	（call,ラベル通過,でばっぐるーむ,オートセーブ不可）
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]\f[bold,1]デバッグメニュー\f[bold,0]\n[200]

\_l[10,]\![*]\__q[master.残存セーブ削除１]シェル削除後の残存セーブ削除\__q\n
\_l[10,]※とても危険な操作です！\n[200]

\_l[10,]\![*]\__q[master.テストシナリオから確認無しでタイトルに戻る]タイトルに戻る\__q
\_q

＠master.KeyPressCommand_List
debug,でばっぐるーむ,q,コマンド入力脱出

＊master.コマンド入力脱出
＄__tmp	（call,ラベル通過,コマンド入力脱出,オートセーブ不可）
＄KeyPressCommand_AcceptingInputs	
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]コマンド入力の受付を終了しました。\n
\_l[10,]タイトルに戻ります。
\_q\x
\![raise,master.テストシナリオから確認無しでタイトルに戻る]



＊master.残存セーブ削除１
＄__tmp	（call,ラベル通過,残存セーブ削除１,オートセーブ不可）
＄ユーザ入力受付中	1
＃入力を受け付ける
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]ゲームの識別子を入力してください。\n
\_l[10,]通常はシェルフォルダ名と同じです。
\_q
\![close,inputbox,__SYSTEM_ALL_INPUT__]
＃他のインプットボックスが出ていたら消しておく

\![open,inputbox,識別子入力,--timeout=0,--reference=残存セーブ削除２]

\x
（nextjump,残存セーブ削除しない１,識別子入力,）


＊master.残存セーブ削除２
＄__tmp	（call,ラベル通過,残存セーブ削除２,オートセーブ不可）
＄ユーザ入力受付中	0
＃入力を受け付けない状態に戻す
＄__tmp	（変数読み出し,識別子入力）
＞master.残存セーブ削除しない１	（変数「__tmp」の存在）==0
＞master.残存セーブ削除しない２	（変数「s_（__tmp）.グローバルセーブ」の存在）==0
＞master.残存セーブ削除しない３	（導入済みシェル「（__tmp）」の存在）==1
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]\_?アンインストール済みシェル「（__tmp）」\_?の\n
\_l[10,]セーブデータが残存しています。\n[150]
\_l[10,]本当に削除しますか？\n[200]

\![*]\__q[master.でばっぐるーむ]削除せず戻る\__q\n[200]

\![*]\__q[master.残存セーブ削除実行２]【危険】削除する\__q\n
\![*]\__q[master.残存セーブ削除実行１]【危険】グローバルセーブを含めて削除する\__q
\_q\x

＊master.残存セーブ削除完了
＄__tmp	（call,ラベル通過,残存セーブ削除３,オートセーブ不可）
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]\_?「（変数読み出し,識別子入力）」\_?の\n
\_l[10,]残存セーブを削除完了しました。

\_q\x\![raise,master.でばっぐるーむ]

＊master.残存セーブ削除実行１
＄s_（__name）.グローバルセーブ	
＞master.残存セーブ削除実行２

＊master.残存セーブ削除実行２
＄__count	１
＄__name	（変数読み出し,識別子入力）
＄s_（__name）.オートセーブ	
＄s_（__name）.クイックセーブ	
＄s_（__name）.既読判定	
＄s_（__name）.シェル情報.updated_before	
＄s_（__name）.シェル情報.updated_last	
＞master.残存セーブ削除実行３

＊master.残存セーブ削除実行３
＄s_（__name）.セーブ（__count）	
＄__count＝（__count）＋１
＞master.残存セーブ削除完了	（__count）>100
＞master.残存セーブ削除実行３



＊master.残存セーブ削除しない１
＄__tmp	（call,ラベル通過,残存セーブ削除しない１,オートセーブ不可）
＄ユーザ入力受付中	0
＃入力を受け付けない状態に戻す
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]入力をキャンセルされました。\n
\_l[10,]デバッグメニューに戻ります。
\_q\x\![raise,master.でばっぐるーむ]



＊master.残存セーブ削除しない２
＄__tmp	（call,ラベル通過,残存セーブ削除しない２,オートセーブ不可）
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]\_?「（変数読み出し,識別子入力）」\_?の\n
\_l[10,]残存セーブを検知できませんでした。\n[150]
\_l[10,]デバッグメニューに戻ります。
\_q\x\![raise,master.でばっぐるーむ]



＊master.残存セーブ削除しない３
＄__tmp	（call,ラベル通過,残存セーブ削除しない３,オートセーブ不可）
（メニュー不可）
（音停止）
（bg,assets/preset/color_dark.png）
：\_q
\_l[10,10]\_?シェル「（変数読み出し,識別子入力）」\_?は\n
\_l[10,]まだアンインストールされていません。\n[150]
\_l[10,]シェルをアンインストール後、再度お試しください。\n[150]
\_l[10,]デバッグメニューに戻ります。
\_q\x\![raise,master.でばっぐるーむ]



＊master.テストシナリオから確認無しでタイトルに戻る
＄文字色強制	
＄文字色.current	（文字色.normal）
＄s_master.オートセーブ	|
\![raise,master.起動]
